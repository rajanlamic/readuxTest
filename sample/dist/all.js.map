{"version":3,"sources":["actions.js","index.js","reducers.js"],"names":["addTodo","toggleTodo","setVisibilityFilter","ADD_TODO","TOGGLE_TODO","SET_VISIBILITY_FILTER","VisibilityFilters","SHOW_ALL","SHOW_COMPLETED","SHOW_ACTIVE","text","type","index","filter","store","console","log","getState","unsubscribe","subscribe","dispatch","visibilityFilter","state","action","todos","completed","map","todo","Object","assign","todoApp"],"mappings":"AAAA;;;;AAIA;;AAEA;;;;;;;QAsBgBA,UAAAA;QAIAC,aAAAA;QAIAC,sBAAAA;AA1BT,IAAMC,8BAAW,UAAjB;AACA,IAAMC,oCAAc,aAApB;AACA,IAAMC,wDAAwB,uBAA9B;;AAEP;;;;AAIO,IAAMC,gDAAoB;AAC7BC,YAAU,UADmB;AAE7BC,kBAAgB,gBAFa;AAG7BC,eAAa;AAHgB,CAA1B;;AAMP;;;;AAIO,SAAST,OAAT,CAAiBU,IAAjB,EAAuB;AAC1B,SAAO,EAAEC,MAAMR,QAAR,EAAkBO,UAAlB,EAAP;AACH;;AAEM,SAAST,UAAT,CAAoBW,KAApB,EAA2B;AAC9B,SAAO,EAAED,MAAMP,WAAR,EAAqBQ,YAArB,EAAP;AACH;;AAEM,SAASV,mBAAT,CAA6BW,MAA7B,EAAqC;AACxC,SAAO,EAAEF,MAAMN,qBAAR,EAA+BQ,cAA/B,EAAP;AACH;ACtCD;;;;AAIA;;AAEA;;AACA;;;;;;AAEA,IAAIC,QAAQ,2CAAZ;;AAGA;AACAC,QAAQC,GAAR,CAAYF,MAAMG,QAAN,EAAZ;;AAGA;AACA;AACA,IAAIC,cAAcJ,MAAMK,SAAN,CAAgB;AAAA,SAC1BJ,QAAQC,GAAR,CAAYF,MAAMG,QAAN,EAAZ,CAD0B;AAAA,CAAhB,CAAlB;;AAIA;AACAH,MAAMM,QAAN,CAAepB,QAAQ,qBAAR,CAAf;AACAc,MAAMM,QAAN,CAAepB,QAAQ,sBAAR,CAAf;AACAc,MAAMM,QAAN,CAAepB,QAAQ,mBAAR,CAAf;AACAc,MAAMM,QAAN,CAAenB,WAAW,CAAX,CAAf;AACAa,MAAMM,QAAN,CAAenB,WAAW,CAAX,CAAf;AACAa,MAAMM,QAAN,CAAelB,oBAAoBI,kBAAkBE,cAAtC,CAAf;;AAEA;AACAU;AC/BA;;;;AAIA;;;;;;AAGA;;AACA;;;;IACQX,sCAAAA;;;AAER,SAASc,gBAAT,GAAoD;AAAA,QAA1BC,KAA0B,uEAAlBf,QAAkB;AAAA,QAARgB,MAAQ;;AAChD,YAAQA,OAAOZ,IAAf;AACI;AACI,mBAAOY,OAAOV,MAAd;AACJ;AACI,mBAAOS,KAAP;AAJR;AAMH;;AAED,SAASE,KAAT,GAAmC;AAAA,QAApBF,KAAoB,uEAAZ,EAAY;AAAA,QAARC,MAAQ;;AAC/B,YAAQA,OAAOZ,IAAf;AACI;AACI,gDACOW,KADP,IAEI;AACIZ,sBAAMa,OAAOb,IADjB;AAEIe,2BAAW;AAFf,aAFJ;AAOJ;AACI,mBAAOH,MAAMI,GAAN,CAAU,UAACC,IAAD,EAAOf,KAAP,EAAiB;AAC9B,oBAAIA,UAAUW,OAAOX,KAArB,EAA4B;AACxB,2BAAOgB,OAAOC,MAAP,CAAc,EAAd,EAAkBF,IAAlB,EAAwB;AAC3BF,mCAAW,CAACE,KAAKF;AADU,qBAAxB,CAAP;AAGH;AACD,uBAAOE,IAAP;AACH,aAPM,CAAP;AAQJ;AACI,mBAAOL,KAAP;AAnBR;AAqBH;;AAED,IAAMQ,UAAU,4BAAgB;AAC5BT,sCAD4B;AAE5BG;AAF4B,CAAhB,CAAhB;;kBAKeM","file":"all.js","sourcesContent":["/**\n * Created by kalpana on 22/05/17.\n */\n\n\"use strict\";\n\n/*\n * action types\n */\n\nexport const ADD_TODO = 'ADD_TODO'\nexport const TOGGLE_TODO = 'TOGGLE_TODO'\nexport const SET_VISIBILITY_FILTER = 'SET_VISIBILITY_FILTER'\n\n/*\n * other constants\n */\n\nexport const VisibilityFilters = {\n    SHOW_ALL: 'SHOW_ALL',\n    SHOW_COMPLETED: 'SHOW_COMPLETED',\n    SHOW_ACTIVE: 'SHOW_ACTIVE'\n}\n\n/*\n * action creators\n */\n\nexport function addTodo(text) {\n    return { type: ADD_TODO, text }\n}\n\nexport function toggleTodo(index) {\n    return { type: TOGGLE_TODO, index }\n}\n\nexport function setVisibilityFilter(filter) {\n    return { type: SET_VISIBILITY_FILTER, filter }\n}","/**\n * Created by kalpana on 22/05/17.\n */\n\n\"use strict\";\n\nimport { createStore } from 'redux'\nimport todoApp from './reducers'\n\nlet store = createStore(todoApp)\n\n\n// Log the initial state\nconsole.log(store.getState())\n\n\n// Every time the state changes, log it\n// Note that subscribe() returns a function for unregistering the listener\nlet unsubscribe = store.subscribe(() =>\n        console.log(store.getState())\n)\n\n// Dispatch some actions\nstore.dispatch(addTodo('Learn about actions'))\nstore.dispatch(addTodo('Learn about reducers'))\nstore.dispatch(addTodo('Learn about store'))\nstore.dispatch(toggleTodo(0))\nstore.dispatch(toggleTodo(1))\nstore.dispatch(setVisibilityFilter(VisibilityFilters.SHOW_COMPLETED))\n\n// Stop listening to state updates\nunsubscribe()\n\n","/**\n * Created by kalpana on 22/05/17.\n */\n\n\"use strict\";\n\n\nimport { combineReducers } from 'redux'\nimport { ADD_TODO, TOGGLE_TODO, SET_VISIBILITY_FILTER, VisibilityFilters } from './actions'\nconst { SHOW_ALL } = VisibilityFilters\n\nfunction visibilityFilter(state = SHOW_ALL, action) {\n    switch (action.type) {\n        case SET_VISIBILITY_FILTER:\n            return action.filter\n        default:\n            return state\n    }\n}\n\nfunction todos(state = [], action) {\n    switch (action.type) {\n        case ADD_TODO:\n            return [\n                ...state,\n                {\n                    text: action.text,\n                    completed: false\n                }\n            ]\n        case TOGGLE_TODO:\n            return state.map((todo, index) => {\n                if (index === action.index) {\n                    return Object.assign({}, todo, {\n                        completed: !todo.completed\n                    })\n                }\n                return todo\n            })\n        default:\n            return state\n    }\n}\n\nconst todoApp = combineReducers({\n    visibilityFilter,\n    todos\n})\n\nexport default todoApp"]}